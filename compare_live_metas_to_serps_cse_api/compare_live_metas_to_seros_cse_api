{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "V2 RSTwittorial - Take control of your SERP snippets with the GSC & CSE API.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMALA96JvEdA9Mb5SXLy4+I",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/searchsolved/search-solved-public-seo/blob/main/compare_live_metas_to_serps_cse_api/compare_live_metas_to_seros_cse_api\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nEbFC_bkRKIG"
      },
      "source": [
        "# Take control of your SERP snippets with the GSC & CSE API\n",
        "Twitter: @leefootSEO\n",
        "Web: https://searchsolved.co.uk\n",
        "\n",
        "**What This Sheet Does**\n",
        "Checks your top X keywords in Search Console and Runs them through the Custom Search Engine API to show how you Page Titles and Meta Descriptions are being displayed in the live SERPs.\n",
        "\n",
        "**Process:**\n",
        "1.  Pull Keyword Data from GSC\n",
        "2.  Run Keywords through Custom Search Engine\n",
        "3.  Run Pull Live Description and Title using Requests"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FiY5qLx0JR-F"
      },
      "source": [
        "# Authentication Files Required\n",
        "\n",
        "1.   client_secrets.json (Google Search Console)\n",
        "2.   CSE Developer Key (Google Custom Search API Developer Key)\n",
        "3.   Get Search Engine Code (Called a cx ID)\n",
        "\n",
        "# Getting the Search Console Authentication Files\n",
        "Excellent step by step guide to download the client_secrets.json\n",
        "\n",
        "https://www.jcchouinard.com/how-to-get-google-search-console-api-keys/\n",
        "\n",
        "# Getting the CSE Developer Key - Free for 100 Searches per day or $5 per 1,000\n",
        "\n",
        "You can get an API key by visiting https://code.google.com/apis/console and clicking \"API Access\". You will then need to switch on the custom search API on the \"Services\" tab.\n",
        "\n",
        "# Getting the cx ID \n",
        "\n",
        "Here you can find the cx id http://www.google.com/cse/manage/all. look for *My search engines* then choose from the list.\n",
        "\n",
        "https://stackoverflow.com/questions/6562125/getting-a-cx-id-for-custom-search-google-api-python"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5IHisLEVyfKn",
        "outputId": "3bfaa0d0-d3e6-400f-c36d-2ce2e02d33c5"
      },
      "source": [
        "!pip install pandas\n",
        "!pip install git+https://github.com/joshcarty/google-searchconsole\n",
        "!pip install install beautifulsoup4\n",
        "print(\"Installed all packages!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n",
            "Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
            "Collecting git+https://github.com/joshcarty/google-searchconsole\n",
            "  Cloning https://github.com/joshcarty/google-searchconsole to /tmp/pip-req-build-tlhoj2m2\n",
            "  Running command git clone -q https://github.com/joshcarty/google-searchconsole /tmp/pip-req-build-tlhoj2m2\n",
            "Requirement already satisfied (use --upgrade to upgrade): searchconsole==0.0.3 from git+https://github.com/joshcarty/google-searchconsole in /usr/local/lib/python3.7/dist-packages\n",
            "Requirement already satisfied: google-api-python-client>=1.7.3 in /usr/local/lib/python3.7/dist-packages (from searchconsole==0.0.3) (1.12.8)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from searchconsole==0.0.3) (2.8.1)\n",
            "Requirement already satisfied: google-auth<2dev,>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from searchconsole==0.0.3) (1.28.1)\n",
            "Requirement already satisfied: google-auth-oauthlib>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from searchconsole==0.0.3) (0.4.4)\n",
            "Requirement already satisfied: uritemplate<4dev,>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.7.3->searchconsole==0.0.3) (3.0.1)\n",
            "Requirement already satisfied: httplib2<1dev,>=0.15.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.7.3->searchconsole==0.0.3) (0.17.4)\n",
            "Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.7.3->searchconsole==0.0.3) (0.0.4)\n",
            "Requirement already satisfied: google-api-core<2dev,>=1.21.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.7.3->searchconsole==0.0.3) (1.26.3)\n",
            "Requirement already satisfied: six<2dev,>=1.13.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client>=1.7.3->searchconsole==0.0.3) (1.15.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<2dev,>=1.5.0->searchconsole==0.0.3) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.6\" in /usr/local/lib/python3.7/dist-packages (from google-auth<2dev,>=1.5.0->searchconsole==0.0.3) (4.7.2)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<2dev,>=1.5.0->searchconsole==0.0.3) (4.2.1)\n",
            "Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<2dev,>=1.5.0->searchconsole==0.0.3) (54.2.0)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib>=0.2.0->searchconsole==0.0.3) (1.3.0)\n",
            "Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (2.23.0)\n",
            "Requirement already satisfied: packaging>=14.3 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (20.9)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (2018.9)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (1.53.0)\n",
            "Requirement already satisfied: protobuf>=3.12.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (3.12.4)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2dev,>=1.5.0->searchconsole==0.0.3) (0.4.8)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.2.0->searchconsole==0.0.3) (3.1.0)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (2020.12.5)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (2.10)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=14.3->google-api-core<2dev,>=1.21.0->google-api-python-client>=1.7.3->searchconsole==0.0.3) (2.4.7)\n",
            "Building wheels for collected packages: searchconsole\n",
            "  Building wheel for searchconsole (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for searchconsole: filename=searchconsole-0.0.3-cp37-none-any.whl size=8799 sha256=266cd6c2e847eba186ed042046b7d70a3d5f153aea1c066afdf1ef564391f7d9\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-w8vt68p3/wheels/eb/d4/d2/b374d767a5df3b100a2302f2dadcd170a487d48abe626c3f09\n",
            "Successfully built searchconsole\n",
            "Requirement already satisfied: install in /usr/local/lib/python3.7/dist-packages (1.3.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (4.6.3)\n",
            "Installed all packages!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lrtYZ4L9yB44",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "877bfcba-5302-4d98-b13a-3793b8fc017c"
      },
      "source": [
        "# import the libraries\n",
        "import time\n",
        "import json\n",
        "import sys\n",
        "import pandas as pd\n",
        "import searchconsole\n",
        "from googleapiclient.discovery import build\n",
        "from urllib import request\n",
        "from bs4 import BeautifulSoup\n",
        "from google.colab import files\n",
        "from urllib.request import Request, urlopen\n",
        "print(\"Imported the libraries!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Imported the libraries!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RadZUEb16uCe"
      },
      "source": [
        "# Upload the CSE Dev Key File"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "Y8MAawsA4XA2",
        "outputId": "cff977f2-c6e9-473b-e027-d630142f1e8f"
      },
      "source": [
        "# upload the cse dev key\n",
        "from google.colab import files\n",
        "cse_key_up = files.upload()\n",
        "# read the contents and parse the data of the CSE Dev Key\n",
        "filename=list(cse_key_up.keys())[0]  # gets the uploaded file name\n",
        "with open(filename, 'r') as f: \n",
        "  cse_key = f.read()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ea6acebc-6ad6-4196-8a3b-fcd5959ceb59\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ea6acebc-6ad6-4196-8a3b-fcd5959ceb59\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving cse-dev-key.txt to cse-dev-key (3).txt\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E1Oi7Y0c8eHo"
      },
      "source": [
        "# Upload the cx_id File"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "Bbpv8a4e3v9t",
        "outputId": "6436daca-5b9b-4efd-a5df-ed3a8ec2ff71"
      },
      "source": [
        "# upload cx_id file\n",
        "from google.colab import files\n",
        "cx_id_up = files.upload()\n",
        "# read the contents and parse the data of the cx_id file\n",
        "filename=list(cx_id_up.keys())[0]  # gets the uploaded file name\n",
        "with open(filename, 'r') as f: \n",
        "  cx_id = f.read()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-1914e7e6-4a25-45c4-b018-1c2d9d74f2fa\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-1914e7e6-4a25-45c4-b018-1c2d9d74f2fa\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving cx-id.txt to cx-id (6).txt\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k0tJDhH77HlI"
      },
      "source": [
        "# Upload the client_secrets.json file"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "M5wTvSP5udfh",
        "outputId": "3432735e-1838-4237-a2c9-afa36816ceea"
      },
      "source": [
        "# upload client_id.json\n",
        "from google.colab import files\n",
        "names = files.upload()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5ebeaf8f-4276-4d77-a66a-58ada401546b\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5ebeaf8f-4276-4d77-a66a-58ada401546b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving client_secrets.json to client_secrets (4).json\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kDrSy6ORw7_a"
      },
      "source": [
        "# Login to Authorise GSC and Paste in Auth Code"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mNASVEuJw6gu",
        "outputId": "37c7f8d9-1d70-45e6-be52-d2aa0022111c"
      },
      "source": [
        "filename=list(names.keys())[0]  # get the name of the uploaded file\n",
        "account = searchconsole.authenticate(client_config=filename, serialize='credentials.json', flow=\"console\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Please visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=158373752154-17ek6obhi20i05iae25k1a7b3gdbt4if.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fwebmasters.readonly&state=30VC7RUJTlbv0EXOcIEpuYQPW7SnKL&prompt=consent&access_type=offline\n",
            "Enter the authorization code: 4/1AY0e-g4KxXAYHf7q0ZFbAIGL-1pagDZztEnrEUVUifMkblDCIPQpb91zPhs\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t8X71psX_Ylu"
      },
      "source": [
        "# Print the List of Available Search Console Properties"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DRZMv0f0wme5"
      },
      "source": [
        "# uncomment to get a list of the available search properties\n",
        "#print(account.webproperties)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JvjsDMYnCm2N"
      },
      "source": [
        "# Set the GSC Variables Below!\n",
        "1.  Country Filter (Uses 3-letter country code) \n",
        "2.  The Number of Keywords from Search Console to Check in the Live SERPs\n",
        "3.  The URL to Check\n",
        "4.  Start / End Date Range\n",
        "\n",
        "List of 3-letter country codes https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BfPaTdb9zKC_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5cbbf851-a8b1-45ac-f916-22716cad356a"
      },
      "source": [
        "# Set GSC Variables Here:\n",
        "country_filter = \"gbr\"\n",
        "top_gsc_kws = 10  # number of keywords to use from gsc - Free for 100 KWs per day\n",
        "url = \"https://www.weldingandwelder.com/\" # Must match SC URL Exactly - print the available accounts in the cell above if unsure! - Usually just missing a trailing /\n",
        "start_date = \"2021-01-01\"  # Example formatting: '2020-09-20'\n",
        "end_date = \"2021-03-31\"\n",
        "print(\"All GSC Variables Set!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "All GSC Variables Set!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TFNmPKhPUDa-"
      },
      "source": [
        "# Set the Custom Search Engine API Variables Below!\n",
        "1.  Language = The Language of the Google Search Engine\n",
        "2.  Geolocation = The GeoLocation of the Google Search Engine\n",
        "3.  Set The Number of Pages to Check (1 = First Page of Google Only)\n",
        "4.  Set the Search Result Page To Start From\n",
        "\n",
        "Note each page counts as a search query. Checking x10 KWs over 10 Pages = 100 Queries.\n",
        "\n",
        "List of Geo Location Codes: https://developers.google.com/custom-search/docs/xml_results_appendices?hl=ro#countryCodes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mSIUa9fdRxp9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "352c3e8a-159e-43f8-e59b-1cfad2572091"
      },
      "source": [
        "# Set CSE Variables Here:\n",
        "language = 'lang_en'  # Search language\n",
        "geolocation = 'uk'  # Set the Geolocation\n",
        "page_limit = 1  # how many pages to check in Google\n",
        "start_page = 1  # Page to start on in Google\n",
        "print(\"All CSE Variables Set!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "All CSE Variables Set!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PpTS5UnKg16M",
        "outputId": "0354fa41-e801-4a02-f72b-11f03fe52650"
      },
      "source": [
        "# error checking routine\n",
        "if page_limit > 10:\n",
        "  print(\"Page limit must be 10 or less! Please reduce the number!\\n\")\n",
        "  sys.exit(1)\n",
        "if start_page > 10:\n",
        "  print(\"Start must be 10 or less! Please reduce the number!\\n\")\n",
        "  sys.exit(1)\n",
        "\n",
        "#print variables\n",
        "print(\"Language: \", language)\n",
        "print(\"Geolocation: \", geolocation)\n",
        "print(\"Page Limit: \", page_limit)\n",
        "print(\"Starting Page: \", start_page)\n",
        "\n",
        "# calculate how many credits are being used\n",
        "credits = top_gsc_kws * page_limit\n",
        "\n",
        "if credits > 100:\n",
        "  print(\"\\nWARNING: This will use\", credits, \"credits!\", credits - 100, \"more than the 100 free CSE searches per day! Consider a paid account..\")\n",
        "else:\n",
        "  print(\"\\nThis will use\", credits, \"credits!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Language:  lang_en\n",
            "Geolocation:  uk\n",
            "Page Limit:  1\n",
            "Starting Page:  1\n",
            "\n",
            "This will use 100 credits!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XoAu35uKRbrz"
      },
      "source": [
        "# Authenticate with Search Console API"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uaXjBc4vzVsO",
        "outputId": "48563363-de44-4c8a-bb3f-274788f29ed2"
      },
      "source": [
        "# Assign values to dimension variables\n",
        "dimension_1 = \"query\"  # get keyword data from Search Console\n",
        "dimension_2 = \"page\"  # get URL data from Search Console\n",
        "dimension_3 = \"country\"  # get country data from Search Console\n",
        "dimension_4 = \"device\"  # Get device data from Search Console\n",
        "available_accounts = account.webproperties  # store available accounts in a var to print if issues\n",
        "\n",
        "try:\n",
        "    print(\"Reading client_secrets.json & credentials.json..\")  # Authenticate with GSC\n",
        "    account = searchconsole.authenticate(\n",
        "        client_config = filename,\n",
        "        credentials = 'credentials.json',\n",
        "    )\n",
        "    webproperty = account[(url)]  # Connect to the GSC property\n",
        "    print(\"Pulling GSC Data. Please Be Patient!\")\n",
        "    gsc_data = (\n",
        "        webproperty.query.range(start_date, end_date)\n",
        "            .dimension(\n",
        "            dimension_1,\n",
        "            dimension_2,\n",
        "            dimension_3,\n",
        "            # dimension_4,  # Dimensions can be commented out, like this one.\n",
        "        )\n",
        "            .get()\n",
        "    )\n",
        "except AttributeError:\n",
        "    print(\"No Data Received from Search Console API! - Check the site name matches Search Console exactly!\\nAvailable accounts: \\n\", available_accounts)\n",
        "    sys.exit(1)\n",
        "print(\"\\nGSC Data Pull Complete!\")\n",
        "\n",
        "# make the GSC dataframe\n",
        "df_gsc_data = pd.DataFrame(gsc_data)\n",
        "print(df_gsc_data.head(top_gsc_kws))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading client_secrets.json & credentials.json..\n",
            "Pulling GSC Data. Please Be Patient!\n",
            "\n",
            "GSC Data Pull Complete!\n",
            "                     query  ...  position\n",
            "0       welding and welder  ...  1.346821\n",
            "1             welding tent  ...  2.809524\n",
            "2            welding bench  ...  8.638647\n",
            "3              flange pins  ...  3.076190\n",
            "4            flange square  ...  4.287425\n",
            "..                     ...  ...       ...\n",
            "95  passive welding helmet  ...  9.691176\n",
            "96     pink welding helmet  ...  7.540541\n",
            "97        steel pipe stand  ...  2.428571\n",
            "98               tig brush  ...  9.981481\n",
            "99  tig welding purge tape  ...  4.800000\n",
            "\n",
            "[100 rows x 7 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w3FBI_5dA24j"
      },
      "source": [
        "# Clean and Refine the Data\n",
        "Filters and sorts data based on variables set. Sorts by highest impressions, removes special characters and creates a list to be checked through the CSE API."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F7lymKeFEzua",
        "outputId": "6514ef41-7a2e-44bf-b108-b56aea574690"
      },
      "source": [
        "df_gsc_data = df_gsc_data[df_gsc_data[\"country\"].str.contains(country_filter)]  # keep only country specific traffic\n",
        "df_gsc_data = df_gsc_data.sort_values(by=\"impressions\", ascending=False)  # sort by highest impressions\n",
        "df_gsc_data.drop_duplicates(subset=\"query\", inplace=True)  # drop duplicate queries (keeping query with highest impressions)\n",
        "row_count = df_gsc_data.shape[0]  # count the number of rows\n",
        "df_gsc_data['row_nums'] = range(0, row_count)  # make a new column to number the rows so that only the top X Rows can be kept\n",
        "top_gsc_kws = top_gsc_kws - 1  # subtract -1 from the specified # of GSC KWs to Use (Because index starts at 0)\n",
        "df_gsc_data = df_gsc_data[~(df_gsc_data['row_nums'] > top_gsc_kws)]  # keep first X rows (Drop rows over X rows)\n",
        "df_gsc_data['query'] = df_gsc_data['query'].str.replace(r\"[^a-zA-Z ]+\", \" \").str.strip()  # strip out special characters\n",
        "search_terms = df_gsc_data['query'].tolist()  # dump search term queries to a list (to loop through with the Search Console API)\n",
        "list_appended_data = []  # create an empty list to append data to from the loop\n",
        "print(\"Sorted by Top Queries\\n\", df_gsc_data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Sorted by Top Queries\n",
            "                           query  ... row_nums\n",
            "6                       welding  ...        0\n",
            "110           welding equipment  ...        1\n",
            "50             welding supplies  ...        2\n",
            "178442  welding supplies online  ...        3\n",
            "2                 welding bench  ...        4\n",
            "...                         ...  ...      ...\n",
            "140998        vacpac electrodes  ...       95\n",
            "171926         welding overalls  ...       96\n",
            "35035            copper welding  ...       97\n",
            "91                    newarc rt  ...       98\n",
            "163        straight line cutter  ...       99\n",
            "\n",
            "[100 rows x 8 columns]\n",
            "100\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sFiPSV2Px5Bd"
      },
      "source": [
        "# Loop Through the GSC Keyword List using the Custom Search API API"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AKuofWKb-FwW",
        "outputId": "097d067e-bd36-4a2a-af5c-8d5c3c415639"
      },
      "source": [
        "def getService():\n",
        "    service = build(\"customsearch\", \"v1\",\n",
        "                    developerKey=cse_key)\n",
        "    return service\n",
        "\n",
        "\n",
        "df_appended_data = []\n",
        "\n",
        "search_terms = df_gsc_data['query'].tolist()\n",
        "print(\"Extracting SERPs via CSE API ..\")\n",
        "get_len = len(search_terms)\n",
        "data_counter = 0\n",
        "for i in search_terms:\n",
        "    print(i)\n",
        "    data_counter = data_counter +1\n",
        "    print(data_counter,\"/\", get_len)\n",
        "    time.sleep(1)\n",
        "\n",
        "    pageLimit = page_limit\n",
        "    service = getService()\n",
        "    startIndex = start_page\n",
        "    response = []\n",
        "    link_list = []\n",
        "    display_link_list = []\n",
        "    title_list = []\n",
        "    snippet_list = []\n",
        "    position_list = []\n",
        "\n",
        "    for nPage in range(0, pageLimit):\n",
        "        print(\"Reading page number:\", nPage + 1)\n",
        "\n",
        "        response.append(service.cse().list(\n",
        "            q=i,  # Search words\n",
        "            cx=\"0b3b9233fe55d0d48\",  # CSE Key\n",
        "            lr=language,  # Search language\n",
        "            gl=geolocation,  # Set the Geolocation\n",
        "            start=startIndex\n",
        "        ).execute())\n",
        "        try:\n",
        "          startIndex = response[nPage].get(\"queries\").get(\"nextPage\")[0].get(\"startIndex\")\n",
        "        except Exception:\n",
        "          print(\"Error Pulling Data!\")\n",
        "          pass\n",
        "\n",
        "    with open('data.json', 'w') as outfile:\n",
        "        json.dump(response, outfile)\n",
        "        for main_dict in response:\n",
        "            print('')  # print main_dict variable to see all keys\n",
        "\n",
        "        for item_access in main_dict['items']:\n",
        "            link = item_access['link']  # Access Keys Here / ['snippet'] / ['link'] etc\n",
        "            link_list.append(link)\n",
        "            \n",
        "        # make new dataframe\n",
        "        df = pd.DataFrame(None)\n",
        "        df['Ranking URL'] = link_list\n",
        "\n",
        "        for item_access in main_dict['items']:\n",
        "            title = item_access['title']  # Access Keys Here / ['snippet'] / ['link'] etc\n",
        "            title_list.append(title)\n",
        "\n",
        "        df['SERP Page Title'] = title_list\n",
        "\n",
        "        try:\n",
        "            for item_access in main_dict['items']:\n",
        "                snippet = item_access['snippet']  # Access Keys Here / ['snippet'] / ['link'] etc\n",
        "                snippet_list.append(snippet)\n",
        "            df['SERP Snippet'] = snippet_list\n",
        "        except KeyError:\n",
        "            pass\n",
        "\n",
        "    df['Search Query'] = i\n",
        "    list_appended_data.append(df)\n",
        "print(\"Finished!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Extracting SERPs via CSE API ..\n",
            "welding\n",
            "1 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding equipment\n",
            "2 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding supplies\n",
            "3 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding supplies online\n",
            "4 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding bench\n",
            "5 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welder\n",
            "6 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding gloves\n",
            "7 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "gas arc\n",
            "8 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "tungsten grinder\n",
            "9 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding trousers\n",
            "10 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "wheel welding\n",
            "11 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding mask\n",
            "12 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "mig welding\n",
            "13 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding rods\n",
            "14 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "p  filter\n",
            "15 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "tig brush\n",
            "16 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding curtains\n",
            "17 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding goggles\n",
            "18 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding tent\n",
            "19 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welders\n",
            "20 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding earth clamp\n",
            "21 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "cutting discs\n",
            "22 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "pipe stands\n",
            "23 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene\n",
            "24 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding ppe\n",
            "25 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "gasarc\n",
            "26 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "fume extraction\n",
            "27 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "gas cutting equipment\n",
            "28 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welders bench\n",
            "29 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "devcon plastic steel\n",
            "30 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene welding equipment\n",
            "31 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding machines\n",
            "32 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding curtain\n",
            "33 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding helmets\n",
            "34 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "kemper extraction\n",
            "35 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene cutting\n",
            "36 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "nevoc regulator\n",
            "37 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene welding equipment\n",
            "38 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "pipe clamps\n",
            "39 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding clamps\n",
            "40 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "acetylene\n",
            "41 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "fuel spill kit\n",
            "42 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "flange pins\n",
            "43 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "brazing rods\n",
            "44 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "inspection mirror\n",
            "45 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "nevoc\n",
            "46 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding screens\n",
            "47 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy propane cutting equipment\n",
            "48 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "kemper fume extraction\n",
            "49 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "auto darkening welding mask\n",
            "50 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene welding\n",
            "51 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "auto darkening welding helmet\n",
            "52 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxygen hose\n",
            "53 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding accessories\n",
            "54 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene kit\n",
            "55 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "air fed welding masks\n",
            "56 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding and welder\n",
            "57 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "cylinder trolley\n",
            "58 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding helmet\n",
            "59 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "mig wire\n",
            "60 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "corpro half mask\n",
            "61 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "flange square\n",
            "62 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "pipe stands for welding\n",
            "63 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "pipe wrap around\n",
            "64 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "cutting torch\n",
            "65 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "chemical spill kit\n",
            "66 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "spot welder\n",
            "67 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene welding kit\n",
            "68 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "stainless steel weld cleaner\n",
            "69 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "plastic steel\n",
            "70 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "portable oxy acetylene welding kit\n",
            "71 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy propane torch kit\n",
            "72 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "ardrox\n",
            "73 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "bar regulator\n",
            "74 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene welding kit price\n",
            "75 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy propane kit\n",
            "76 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding fume extraction\n",
            "77 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy propane cutting torch\n",
            "78 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "acetylene hose\n",
            "79 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "reflective clothing\n",
            "80 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding fume extractor\n",
            "81 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "pipe alignment clamp\n",
            "82 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "copper welding rod\n",
            "83 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "portapak oxy acetylene for sale\n",
            "84 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding booth\n",
            "85 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxygen acetylene kit\n",
            "86 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "cylinder wall bracket\n",
            "87 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "oxy acetylene regulators\n",
            "88 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding magnets\n",
            "89 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "combination cylinder key and spanner\n",
            "90 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "magnetic earth clamp\n",
            "91 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "model o welding torch\n",
            "92 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding machine\n",
            "93 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "brazing gloves\n",
            "94 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "air fed welding helmets\n",
            "95 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "vacpac electrodes\n",
            "96 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "welding overalls\n",
            "97 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "copper welding\n",
            "98 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "newarc rt\n",
            "99 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "straight line cutter\n",
            "100 / 100\n",
            "Reading page number: 1\n",
            "\n",
            "Finished!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "280McaUJHW3X"
      },
      "source": [
        "# clean the url varaible to be use to filter the right site from the CSE results.\n",
        "url = url.replace(\"http://www.\",\"\")\n",
        "url = url.replace(\"https://www.\",\"\")\n",
        "url = url.replace(\"http://\",\"\")\n",
        "url = url.replace(\"https://\",\"\")\n",
        "url = url.replace(\"sc-domain:\",\"\")\n",
        "url = url.rstrip('\\/')  # remove trailing slash"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wc8fg0oRMRaY"
      },
      "source": [
        "# Make New Dataframe and Filter the Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bb9Gt7i7-7Rh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcb93c10-8a43-48fe-b2d5-5616683b1708"
      },
      "source": [
        "df_appended_data = pd.concat(list_appended_data)  # make a new dataframe from the appended list\n",
        "print(\"Filtering URLs which match:\", url, \"\\n\")\n",
        "df_appended_data = df_appended_data[df_appended_data['Ranking URL'].str.contains(url)]  # filter out any site that doesn't match the target domain\n",
        "df_appended_data = df_appended_data[~df_appended_data[\"Ranking URL\"].str.contains(\"pdf\", na=False)]  # drop PDF Files\n",
        "rows = df_appended_data.shape[0]\n",
        "if rows == 0:\n",
        "  print(\"Empty Dataframe! - Try searching more pages in Google!\")\n",
        "  sys.exit(1)\n",
        "else:\n",
        "  print(df_appended_data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Filtering URLs which match: weldingandwelder.com \n",
            "\n",
            "                                         Ranking URL  ...                     Search Query\n",
            "8                  https://www.weldingandwelder.com/  ...                welding equipment\n",
            "3                  https://www.weldingandwelder.com/  ...          welding supplies online\n",
            "4  https://www.weldingandwelder.com/category/weld...  ...                    welding bench\n",
            "6  https://www.weldingandwelder.com/category/weld...  ...                 welding trousers\n",
            "1  https://www.weldingandwelder.com/category/weld...  ...                     welding tent\n",
            "2  https://www.weldingandwelder.com/category/pipe...  ...                      pipe stands\n",
            "2  https://www.weldingandwelder.com/category/weld...  ...                    welders bench\n",
            "1  https://www.weldingandwelder.com/product/devco...  ...             devcon plastic steel\n",
            "5  https://www.weldingandwelder.com/category/weld...  ...                kemper extraction\n",
            "7  https://www.weldingandwelder.com/category/weld...  ...            oxy acetylene cutting\n",
            "3  https://www.weldingandwelder.com/product/ga600...  ...                  nevoc regulator\n",
            "0  https://www.weldingandwelder.com/category/pipe...  ...                      flange pins\n",
            "4  https://www.weldingandwelder.com/category/weld...  ...           kemper fume extraction\n",
            "0                  https://www.weldingandwelder.com/  ...               welding and welder\n",
            "6  https://www.weldingandwelder.com/product/corpr...  ...                 corpro half mask\n",
            "0  https://www.weldingandwelder.com/product/flang...  ...                    flange square\n",
            "0  https://www.weldingandwelder.com/category/pipe...  ...          pipe stands for welding\n",
            "6  https://www.weldingandwelder.com/category/weld...  ...     stainless steel weld cleaner\n",
            "1  https://www.weldingandwelder.com/product/devco...  ...                    plastic steel\n",
            "9  https://www.weldingandwelder.com/category/weld...  ...  oxy acetylene welding kit price\n",
            "3  https://www.weldingandwelder.com/category/pipe...  ...             pipe alignment clamp\n",
            "6  https://www.weldingandwelder.com/product/coppe...  ...               copper welding rod\n",
            "4    https://www.weldingandwelder.com/product/14666/  ...                        newarc rt\n",
            "\n",
            "[23 rows x 4 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MEgPHLta7kDU"
      },
      "source": [
        "#Scrape Live Titles and Metas with Beautiful Soup"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y7vhw95dgFl0",
        "outputId": "2662aea5-e49f-496a-a97c-21c9bced7ce3"
      },
      "source": [
        "# Grab the page title & meta description to check with beautiful soup\n",
        "link_check = df_appended_data['Ranking URL'].tolist()\n",
        "\n",
        "# make empty placeholder lists to store the results\n",
        "df_bs4_appended_title = []  \n",
        "df_bs4_appended_desc = []\n",
        "\n",
        "# loop through URLs and Scrape the Live Page Title and Meta Descriptions\n",
        "for i in link_check:\n",
        "    print(i)\n",
        "    url_bs4 = i\n",
        "    \n",
        "    hdr = {'User-Agent': 'Mozilla/5.0'}\n",
        "    req = Request(url_bs4,headers=hdr)\n",
        "    try:\n",
        "      page = urlopen(req)\n",
        "    except Exception:\n",
        "      print(\"Couldn't scrape!\")\n",
        "      pass\n",
        "\n",
        "    soup = BeautifulSoup(page)\n",
        "    title = soup.find('title')\n",
        "    try:\n",
        "      print(title.string)\n",
        "    except Exception:\n",
        "      print(\"Couldn't scrape!\")\n",
        "      pass\n",
        "\n",
        "    # extract the meta description\n",
        "    desc = \"\"\n",
        "    for meta in soup.findAll(\"meta\"):\n",
        "        metaname = meta.get('name', '').lower()\n",
        "        metaprop = meta.get('property', '').lower()\n",
        "        if 'description' == metaname or metaprop.find(\"description\") > 0:\n",
        "            desc = meta['content'].strip()\n",
        "\n",
        "    print(desc)\n",
        "\n",
        "    try:\n",
        "      df_bs4_appended_title.append(title.string)\n",
        "    except AttributeError:\n",
        "      df_bs4_appended_title.append(\"Couldn't Scrape!\")\n",
        "      pass\n",
        "    try:\n",
        "      df_bs4_appended_desc.append(desc)\n",
        "    except AttributeError:\n",
        "      df_bs4_appended_desc.append(\"Couldn't Scrape!\")\n",
        "      pass\n",
        "\n",
        "print(\"Filtering on:\", url)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "https://www.weldingandwelder.com/\n",
            "Welding Equipment | Welding Supplies | - Welding & Welder\n",
            "Welding equipment for MIG, TIG & MMA welding. Vast range of welding machines, cutting equipment, safety equipment and fume extraction. Welding suppliers online.\n",
            "https://www.weldingandwelder.com/\n",
            "Welding Equipment | Welding Supplies | - Welding & Welder\n",
            "Welding equipment for MIG, TIG & MMA welding. Vast range of welding machines, cutting equipment, safety equipment and fume extraction. Welding suppliers online.\n",
            "https://www.weldingandwelder.com/category/welding-tools-benches/welding-benches-workshop-benches/heavy-duty-welding-benches/welding-benches-steel-top/\n",
            "Welding Benches Steel Top - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/welders-ppe/welders-clothing/welders-jackets-welders-trousers/\n",
            "Welders Jackets - Welders Trousers - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/welders-ppe/welding-tents-work-shelters/\n",
            "Welding Tents & Work Shelters - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/pipe-stands-pipe-clamps/pipe-stands/\n",
            "Pipe Stands - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/welding-tools-benches/welding-benches-workshop-benches/heavy-duty-welding-benches/\n",
            "Heavy Duty Welding Benches - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/product/devcon-plastic-steel-a-500g/\n",
            "Devcon Plastic Steel \"A\" 500g - Welding & Welder\n",
            "PLASTIC STEEL PUTTY (A) x 500grams\n",
            "https://www.weldingandwelder.com/category/welding-fume-extraction/kemper-fume-extraction-equipment/kemper-mobile-fume-extraction/\n",
            "Kemper Mobile Fume Extraction - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/welding-equipment/oxy-acetylene-cutting-welding/\n",
            "Oxy-Acetylene Cutting & Welding - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/product/ga600-high-pressure-inert-gas-manifold-regulator-ran07016-nevoc/\n",
            "GA600 High Pressure Inert Gas Manifold Regulator RAN07016 Nevoc - Welding & Welder\n",
            "The Tech-Master GA 600 High Pressure / High Flow multi-stage regulator is a high peformance product capable of the largest flowrate in its class. The\n",
            "https://www.weldingandwelder.com/category/pipe-stands-pipe-clamps/pipe-measuring-marking/flange-pins/\n",
            "Flange Pins - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/welding-fume-extraction/kemper-fume-extraction-equipment/kemper-mobile-fume-extraction/\n",
            "Kemper Mobile Fume Extraction - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/\n",
            "Welding Equipment | Welding Supplies | - Welding & Welder\n",
            "Welding equipment for MIG, TIG & MMA welding. Vast range of welding machines, cutting equipment, safety equipment and fume extraction. Welding suppliers online.\n",
            "https://www.weldingandwelder.com/product/corpro-half-mask/\n",
            "Corpro Half Mask [HM 1400 medium] - Welding & Welder\n",
            "Half Mask\n",
            "https://www.weldingandwelder.com/product/flange-square-12-x-12-300-x-300mm/\n",
            "Flange Square 12 x 12\" [300 x 300mm] - Welding & Welder\n",
            "Flange Square 12 x 12\"\n",
            "https://www.weldingandwelder.com/category/pipe-stands-pipe-clamps/pipe-stands/\n",
            "Pipe Stands - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/welding-equipment/weld-cleaning-machines-consumables/stainless-steel-weld-cleaning/\n",
            "Stainless Steel Weld Cleaning - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/product/devcon-plastic-steel-a-500g/\n",
            "Devcon Plastic Steel \"A\" 500g - Welding & Welder\n",
            "PLASTIC STEEL PUTTY (A) x 500grams\n",
            "https://www.weldingandwelder.com/category/welding-equipment/oxy-acetylene-cutting-welding/\n",
            "Oxy-Acetylene Cutting & Welding - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/category/pipe-stands-pipe-clamps/pipe-welding-clamps/e-z-fit-gold-pipe-alignment-clamp/\n",
            "E-Z Fit Gold Pipe Alignment Clamp - Welding & Welder\n",
            "\n",
            "https://www.weldingandwelder.com/product/copper-welding-rod-no-7-x-3-2mm-x-1kg/\n",
            "Copper Welding Rod No 7 x 3.2mm x 1Kg - Welding & Welder\n",
            "Copper Welding Rod No 7 x 3.2mm x 1Kg Product Description An easy flowing, high quality copper rod for full fusion welding of deoxidised copper sheet. The\n",
            "https://www.weldingandwelder.com/product/14666/\n",
            "Newarc RT2000 Dual Voltage TIG Power Source - Welding & Welder\n",
            "RT 2000 Dual Voltage 200 amp TIG and MMA Power Source With a fast response and current regulation, the RT2000 offers high quality and reliability for the professional welder. The user-friendly machine is portable, versatile and available in single and dual-voltage versions. It provides superb MMA performance with all types of electrodes, and TIG welding with high frequency ignition. The RT2000 provides digital current display, pre-gas, slope up, slope down and post-gas timing. You may select either HF or contact ignition and 2T or 4T torch switch operation. The unit has an excellent duty cycle in high ambient temperatures, and is designed to meet all types of environmental conditions. It is ideal for production, site and maintenance applications.\n",
            "Filtering on: weldingandwelder.com\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BMYYpnKDBhiq"
      },
      "source": [
        "#Make, Clean & Export the Final Dataframe + Merge GSC Data Back In"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qILY88obBfIL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "outputId": "ffb829cb-b7c8-47f8-e331-184b3ca98f9e"
      },
      "source": [
        "# create new columns for the page title and meta description and populate\n",
        "df_appended_data['Live Page Title'] = df_bs4_appended_title\n",
        "df_appended_data['Live Meta Description'] = df_bs4_appended_desc\n",
        "\n",
        "# make new dataframe to merge the impression data back in\n",
        "df_impressions = df_gsc_data[['query', 'impressions', 'clicks']]\n",
        "df_appended_data = pd.merge(df_appended_data, df_impressions, left_on=\"Search Query\", right_on=\"query\", how=\"left\")  # merge impression data back in\n",
        "\n",
        "# rename the impression and clicks columns\n",
        "df_appended_data.rename(columns={\"impressions\": \"Impressions\", \"clicks\": \"Clicks\"}, inplace=True)\n",
        "\n",
        "# set the new column order\n",
        "cols = [\n",
        "    \"Search Query\",\n",
        "    \"Impressions\",\n",
        "    \"Clicks\",\n",
        "    \"Ranking URL\",\n",
        "    \"Live Page Title\",\n",
        "    \"SERP Page Title\",\n",
        "    \"Live Meta Description\",\n",
        "    \"SERP Snippet\",\n",
        "    \"Title Match?\",\n",
        "    \"Meta Match?\",\n",
        "]\n",
        "\n",
        "# reindex the new column order\n",
        "df_appended_data = df_appended_data.reindex(columns=cols)\n",
        "\n",
        "# drop duplicate Rows\n",
        "df_appended_data.drop_duplicates(subset=\"Search Query\", inplace=True)\n",
        "\n",
        "# Compare Live Site Data to SERP Data and Return True / False in a new column\n",
        "df_appended_data['Title Match?'] = df_appended_data['SERP Page Title'] == df_appended_data['Live Page Title']\n",
        "df_appended_data['Meta Match?'] = df_appended_data['SERP Snippet'] == df_appended_data['Live Meta Description']\n",
        "\n",
        "# print the dataframe\n",
        "print(df_appended_data)\n",
        "\n",
        "# make the final export\n",
        "df_appended_data.to_csv('serps-vs-live-metas.csv', index=False)\n",
        "files.download('serps-vs-live-metas.csv')\n",
        "print(\"Downloaded the CSV!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                       Search Query  Impressions  ...  Title Match? Meta Match?\n",
            "0                 welding equipment         2210  ...         False       False\n",
            "1           welding supplies online         1143  ...         False       False\n",
            "2                     welding bench         1035  ...          True       False\n",
            "3                  welding trousers          466  ...          True       False\n",
            "4                      welding tent          315  ...          True       False\n",
            "5                       pipe stands          280  ...          True       False\n",
            "6                     welders bench          252  ...          True       False\n",
            "7              devcon plastic steel          251  ...          True       False\n",
            "8                 kemper extraction          242  ...          True       False\n",
            "9             oxy acetylene cutting          240  ...          True       False\n",
            "10                  nevoc regulator          231  ...         False       False\n",
            "11                      flange pins          210  ...          True       False\n",
            "12           kemper fume extraction          191  ...          True       False\n",
            "13               welding and welder          173  ...         False       False\n",
            "14                 corpro half mask          167  ...          True       False\n",
            "15                    flange square          167  ...          True       False\n",
            "16          pipe stands for welding          167  ...          True       False\n",
            "17     stainless steel weld cleaner          156  ...          True       False\n",
            "18                    plastic steel          156  ...          True       False\n",
            "19  oxy acetylene welding kit price          147  ...          True       False\n",
            "20             pipe alignment clamp          144  ...          True       False\n",
            "21               copper welding rod          143  ...          True       False\n",
            "22                        newarc rt          126  ...          True       False\n",
            "\n",
            "[23 rows x 10 columns]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_0c9ec961-1e60-4cf6-bb88-687f54bd1107\", \"serps-vs-live-metas.csv\", 10560)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Downloaded the CSV!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kMs-wUfXQHfQ"
      },
      "source": [
        "# Possible Remedial Strategies\n",
        "\n",
        "# Data-NoSnippet\n",
        "1.  Use *data-nosnippet* if they're pulling in content from footer / header etc\n",
        "\n",
        "# Add Missing Keywords\n",
        "1. Insert any missing keywords to the page title & meta descriptions\n",
        "\n",
        "# Steering Content\n",
        "1.  Add a custom meta description\n",
        "2.  Write the first line of content on the page as a second choice meta description\n",
        "\n",
        "Data-nosnippet: https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "atnXkCMpQo0E"
      },
      "source": [
        "# Other Ideas\n",
        "1.  Train an AI model https://www.searchenginejournal.com/automated-title-tag-optimization-using-deep-learning/390207/\n",
        "2.  Use Polyfuzz / Fuzzywuzzy library to see how similar / different titles and metas are"
      ]
    }
  ]
}